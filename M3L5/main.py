from logic import DB_Manager  
from config import *  
from telebot import TeleBot  
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ Telebot

bot = TeleBot(TOKEN)  
hideBoard = types.ReplyKeyboardRemove()  # –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
def cansel(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info", reply_markup=hideBoard)

# –ù–µ–º–∞—à –ø—Ä–æ–µ–∫—Ç–∞
def no_projects(message):
    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤!\n–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /new_project')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def gen_inline_markup(rows):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

# –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∞
def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
    markup.add(KeyboardButton(cancel_button))
    return markup

# –ê—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
attributes_of_projects = {
    '–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞': ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞", "project_name"],
    "–û–ø–∏—Å–∞–Ω–∏–µ": ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "description"],
    "–°—Å—ã–ª–∫–∞": ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "url"],
    "–°—Ç–∞—Ç—É—Å": ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏", "status_id"]
}

# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
def info_project(message, user_id, project_name):
    info = manager.get_project_info(user_id, project_name)[0]
    skills = manager.get_project_skills(project_name)
    if not skills:
        skills = '–ù–∞–≤—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'
    bot.send_message(message.chat.id, f"""Project name: {info[0]}
Description: {info[1]}
Link: {info[2]}
Status: {info[3]}
Skills: {skills}
""")

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id,
"""
üéâ **–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤!**
–ü–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã. –í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç—ã.
- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–∞–≤—ã–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
- –£–¥–∞–ª—è—Ç—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã.

‚ö° –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/info`, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –≤—Å–µ—Ö –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö!
""", parse_mode="Markdown")

# –∫–∞–∫–∏–µ –∫–æ–º–º–∞–Ω–¥—ã –µ—Å—Ç—å
@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
"""
üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∫–∏!**

–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç:

üìå **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞**:
  `/new_project` ‚Äî –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, —Å—Å—ã–ª–∫–æ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–º.

üìå **–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞**:
  `/delete` ‚Äî —É–¥–∞–ª—è–π –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã.

üìå **–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤**:
  `/projects` ‚Äî –ø–æ–ª—É—á–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∏—Ö –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

üìå **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏**:
  `/update_projects` ‚Äî –∏–∑–º–µ–Ω–∏ –¥–µ—Ç–∞–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.

üìå **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤**:
  `/skills` ‚Äî –¥–æ–±–∞–≤—å –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.

üìå **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ**:
  –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!

üí° –£–¥–∞—á–∏ —Å –∏–¥–µ—è–º–∏!
""", parse_mode="Markdown")

# –ö–æ–º–º–∞–Ω–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['new_project'])
def addtask_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, name_project)

# –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
def name_project(message):
    name = message.text
    user_id = message.from_user.id
    data = [user_id, name]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
    bot.register_next_step_handler(message, link_project, data=data)

# —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
def link_project(message, data):
    data.append(message.text)
    statuses = [x[0] for x in manager.get_statuses()]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=gen_markup(statuses))
    bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –±–∑
def callback_project(message, data, statuses):
    status = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if status not in statuses:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(statuses))
        bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)
        return
    status_id = manager.get_status_id(status)
    data.append(status_id)
    manager.insert_project([tuple(data)])  # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–∞–∑—É
    bot.send_message(message.chat.id, "–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")


# –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∫ –ø—Ä–æ–µ–∫—Ç—É
@bot.message_handler(commands=['skills'])
def skill_handler(message):    
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if projects:
        projects = [x[2] for x in projects]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        no_projects(message)  # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

# –®–∞–≥ 2: –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞
def skill_project(message, projects):
    project_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if project_name not in projects:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        skills = [x[1] for x in manager.get_skills()]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)

# –®–∞–≥ 3: –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–∞–≤—ã–∫–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
def set_skill(message, project_name, skills):
    skill = message.text
    user_id = message.from_user.id
    if message.text == cancel_button:
        cansel(message)
        return
    if skill not in skills:
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤—ã–±—Ä–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–∞–≤—ã–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)
        return
    manager.insert_skill(user_id, project_name, skill)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –≤ –±–∞–∑—É
    bot.send_message(message.chat.id, f"‚úÖ –ù–∞–≤—ã–∫ **{skill}** –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç—É **{project_name}**!", parse_mode="Markdown")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
@bot.message_handler(commands=['projects'])
def get_projects(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if projects:
        text = "\n\n".join([
            f"üìù **{x[2]}**\nüîó –°—Å—ã–ª–∫–∞: {x[4]}\nüìå –°—Ç–∞—Ç—É—Å: {x[3]}"
            for x in projects
        ])
        bot.send_message(message.chat.id, f"–í–æ—Ç —Ç–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n\n{text}", reply_markup=gen_inline_markup([x[2] for x in projects]), parse_mode="Markdown")
    else:
        no_projects(message)

# Callback-—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    project_name = call.data  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ callback_data
    info_project(call.message, call.from_user.id, project_name)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['delete'])
def delete_handler(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        text = "\n".join([f"Project name:{x[2]} \nLink:{x[4]}\n" for x in projects])
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, text, reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
    else:
        no_projects(message)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_project(message, projects):
    project = message.text
    user_id = message.from_user.id
    if message.text == cancel_button:
        cansel(message)
        return
    if project not in projects:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑!', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
        return
    project_id = manager.get_project_id(project, user_id)
    manager.delete_project(user_id, project_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    bot.send_message(message.chat.id, f'–ü—Ä–æ–µ–∫—Ç {project} —É–¥–∞–ª–µ–Ω!')

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['update_projects'])
def update_project(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects)
    else:
        no_projects(message)

# –®–∞–≥ 2: –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def update_project_step_2(message, projects):
    project_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if project_name not in projects:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!) –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑:", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects)
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ", reply_markup=gen_markup(attributes_of_projects.keys()))
    bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)

# –®–∞–≥ 3: –í—ã–±–æ—Ä –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def update_project_step_3(message, project_name):
    attribute = message.text
    reply_markup = None
    if message.text == cancel_button:
        cansel(message)
        return
    if attribute not in attributes_of_projects.keys():
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—à–∏–±—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(attributes_of_projects.keys()))
        bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)
        return
    elif attribute == "–°—Ç–∞—Ç—É—Å":
        rows = manager.get_statuses()
        reply_markup = gen_markup([x[0] for x in rows])
    bot.send_message(message.chat.id, attributes_of_projects[attribute][0], reply_markup=reply_markup)
    bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attributes_of_projects[attribute][1])

# –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
def update_project_step_4(message, project_name, attribute):
    update_info = message.text
    if attribute == "status_id":
        rows = manager.get_statuses()
        if update_info in [x[0] for x in rows]:
            update_info = manager.get_status_id(update_info)
        elif update_info == cancel_button:
            cansel(message)
        else:
            bot.send_message(message.chat.id, "–ë—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup([x[0] for x in rows]))
            bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attribute)
            return
    user_id = message.from_user.id
    data = (update_info, project_name, user_id)
    manager.update_projects(attribute, data)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–∞–∑–µ
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã!)")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    projects = [x[2] for x in manager.get_projects(user_id)]  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    project = message.text
    if project in projects:
        info_project(message, user_id, project)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
        return
    bot.reply_to(message, "–¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
    info(message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    manager = DB_Manager(DATABASE)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    bot.infinity_polling()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
